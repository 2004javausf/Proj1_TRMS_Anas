/*******************************************************************************
   Tuition Reimbursement Management System (TRMS) Database - Version 1.0
   Script: TRMS.sql
   Description: Creates the TRMS database.
   DB Server: Oracle
   Author: Anas Mohamad Daud
********************************************************************************/

/*******************************************************************************
   Drop database if it exists
********************************************************************************/

DROP USER TRMS CASCADE;

/*******************************************************************************
   Create Database
********************************************************************************/
CREATE USER amd
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to amd;
GRANT resource to amd;
GRANT create session TO amd;
GRANT create table TO amd;
GRANT create view TO amd;

conn amd/p4ssw0rd

/*******************************************************************************
   Create Tables
********************************************************************************/

CREATE TABLE USERS(
USER_ID INTEGER PRIMARY KEY,
USER_NAME VARCHAR2(20),
USER_PASSWORD VARCHAR2(20),
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(20),
USER_POS VARCHAR2(20),
ACC_BALANCE DOUBLE PRECISION);

INSERT INTO USERS VALUES(1,'anasd','password','Anas','Daud','Employee',1000);
INSERT INTO USERS VALUES(2,'bgates','password','Bill','Gates','DS',1000);
INSERT INTO USERS VALUES(3,'testdh','password','Department','Head','DH',1000);
INSERT INTO USERS VALUES(4,'testbenco','password','Ben','Co','BC',1000);
INSERT INTO USERS VALUES(5,'testceo','password','Jason','Borne','CEO',1000);

CREATE TABLE RFORMS(
FORM_ID INTEGER PRIMARY KEY,
USER_ID INTEGER,
USER_FNAME VARCHAR2(20),
USER_LNAME VARCHAR2(20),
EVENT_COST DOUBLE PRECISION,
EVENT_RIM DOUBLE PRECISION,
EVENT_TYPE VARCHAR2(20),
EVENT_DATE DATE,
EVENT_LOCATION VARCHAR2(50),
EVENT_DESC VARCHAR2(50),
FORM_LVL INTEGER,
EVENT_GFORMAT VARCHAR2(20),
EVENT_PASSGRADE VARCHAR2(20),
EVENT_GRADE VARCHAR2(10),
EVENT_JUSTIFICATION VARCHAR(50),
MISSED_DAYS INTEGER,
FORM_STATUS VARCHAR(20)
);

INSERT INTO RFORMS VALUES(1,1,'Anas','Daud',70,30,'Seminar',DATE '2020-08-01','Tampa','MLM Seminar',1,'Pass/Fail','Pass','TBD','Need Money',5,'Pending');
INSERT INTO RFORMS VALUES(2,1,'Anas','Daud',100,60,'Seminar',DATE '2020-08-25','Orlando','MLM Seminar 2',1,'Pass/Fail','Pass','TBD','Need More Money',7,'Pending');

SELECT * FROM RFORMS WHERE USER_ID = 1;
SELECT * FROM RFORMS;

CREATE TABLE FORMS(
FORM_ID INTEGER PRIMARY KEY,
FORM_USER_ID INTEGER,
FORM_EVENT_ID INTEGER,
SUBMISSION_DATE DATE,
EVENT_COST DOUBLE PRECISION,
FORM_STATUS VARCHAR(20),
EVENT_JUSTIFICATION VARCHAR(50)
);

INSERT INTO FORMS VALUES(1,1,5,DATE '2020-10-20',450,'pending','placeholder');
INSERT INTO FORMS VALUES(2,2,4,DATE '2020-07-14',200,'pending','placeholder');
INSERT INTO FORMS VALUES(3,3,3,DATE '2020-08-03',150,'pending','placeholder');
INSERT INTO FORMS VALUES(4,4,2,DATE '2020-06-28',300,'pending','placeholder');

CREATE TABLE EVENT(
EVENT_ID INTEGER PRIMARY KEY,
EVENT_TYPE INTEGER,
EVENT_DATE DATE,
EVENT_LOCATION VARCHAR2(50),
EVENT_DESC VARCHAR2(50),
EVENT_GFORMAT INTEGER,
EVENT_GRADE VARCHAR2(10)
);

CREATE TABLE EVENT_TYPE(
EVENT_TYPE_ID INTEGER PRIMARY KEY,
EVENT_TYPE_NAME VARCHAR2(60),
EVENT_TYPE_PERCENT NUMBER NOT NULL
);

-- HARD CODE VALUES FOR TABLE EVENT_TYPE
INSERT INTO EVENT_TYPE VALUES (1, 'University Course', 80);
INSERT INTO EVENT_TYPE VALUES (2, 'Seminar', 60);
INSERT INTO EVENT_TYPE VALUES (3, 'Certification Prep Class', 75);
INSERT INTO EVENT_TYPE VALUES (4, 'Certification', 100);
INSERT INTO EVENT_TYPE VALUES (5, 'Technical Training', 90);
INSERT INTO EVENT_TYPE VALUES (6, 'Other', 30);

CREATE TABLE GRADING_FORMAT(
GRADING_FORMAT_ID INTEGER PRIMARY KEY,
GRADING_FORMAT_NAME VARCHAR2(40),
GRADING_FORMAT_PASS_GRADE VARCHAR2(10)
);

-- HARD CODE VALUES FOR TABLE GRADING_FORMAT
INSERT INTO GRADING_FORMAT VALUES (1, 'Percentage (0-100)', '80');
INSERT INTO GRADING_FORMAT VALUES (2, 'Grade (A-F)', 'B');
INSERT INTO GRADING_FORMAT VALUES (3, 'Pass/Fail', 'PASS');
INSERT INTO GRADING_FORMAT VALUES (4, 'Other', 'Other');


/*******************************************************************************
   FOREIGN KEYS
********************************************************************************/
   
ALTER TABLE RFORMS ADD CONSTRAINT FK_RFORMS_USER
    FOREIGN KEY (USER_ID) REFERENCES
    USERS (USER_ID);
    
ALTER TABLE FORMS
DROP CONSTRAINT FK_FORMS_USER;
    
ALTER TABLE FORMS ADD CONSTRAINT FK_FORMS_EVENTS
    FOREIGN KEY (FORM_EVENT_ID) REFERENCES
    EVENT (EVENT_ID);
    
ALTER TABLE EVENT ADD CONSTRAINT FK_EVENT_GRADING_FORMAT
    FOREIGN KEY (EVENT_GFORMAT) REFERENCES
    GRADING_FORMAT (GRADING_FORMAT_ID);

/*******************************************************************************
   CREATE SEQUENCES
********************************************************************************/

CREATE SEQUENCE FORMS_ID_SEQ; 
CREATE SEQUENCE EVENTS_ID_SEQ;

SELECT  FORMS_ID_SEQ.NEXTVAL
FROM    dual;

/*******************************************************************************
   Alter Tables
********************************************************************************/

ALTER TABLE CUSTOMERS
ADD CONSTRAINT UQ_USER_NAME
UNIQUE(USER_NAME);

/*******************************************************************************
   CREATE TRIGGERS
********************************************************************************/

CREATE OR REPLACE TRIGGER FORMS_INSERT
    BEFORE INSERT ON FORMS
    FOR EACH ROW
    BEGIN
        SELECT FORMS_ID_SEQ.NEXTVAL INTO :NEW.FORMS_ID FROM DUAL;
    END;
/

CREATE OR REPLACE TRIGGER EVENTS_INSERT
    BEFORE INSERT ON EVENTS
    FOR EACH ROW
    BEGIN
        SELECT EVENTS_ID_SEQ.NEXTVAL INTO :NEW.EVENTS_ID FROM DUAL;
    END;
/

/*******************************************************************************
   STORED PROCEDURES
********************************************************************************/

-- PROCEDURE TO INSERT A NEW REIMBURSEMENT 
CREATE OR REPLACE PROCEDURE NEW_REIMBURSE
(USERID INT,FNAME VARCHAR2,LNAME VARCHAR2,ECOST DOUBLE PRECISION, ERIM DOUBLE PRECISION,ETYPE VARCHAR2,
 EDATE DATE,EPLACE VARCHAR2,EDESC VARCHAR2,FLVL INT,GFORMAT VARCHAR2,PASSGRADE VARCHAR2,EJUSTIFY VARCHAR2,
 MDAYS INTEGER)
AS
BEGIN

INSERT INTO RFORMS (FORM_ID,USER_ID,USER_FNAME,USER_LNAME,EVENT_COST,EVENT_RIM,EVENT_TYPE,EVENT_DATE,EVENT_LOCATION,EVENT_DESC,FORM_LVL,
                    EVENT_GFORMAT, EVENT_PASSGRADE,EVENT_GRADE,EVENT_JUSTIFICATION,MISSED_DAYS,FORM_STATUS)
VALUES (FORMS_ID_SEQ.NEXTVAL,USERID,FNAME,LNAME,ECOST,ERIM,ETYPE,EDATE,EPLACE,EDESC,FLVL,GFORMAT,PASSGRADE,'TBD',EJUSTIFY,MDAYS,'Pending');

UPDATE USERS SET ACC_BALANCE = (ACC_BALANCE-ERIM) WHERE USER_ID = USERID;

COMMIT;
END;
/

EXECUTE NEW_REIMBURSE(1,'Anas','Daud',40,12,'Other',DATE '2020-08-20','Miami','Cruise',1,'Pass/Fail','Pass','Holiday Time',7);

-- PROCEDURE TO APPROVE A REIMBURSEMENT
CREATE OR REPLACE PROCEDURE APPROVEREIMBURSE(FORMID INT)
AS
FLVL INT;

BEGIN
    
    SELECT FORM_LVL INTO FLVL FROM RFORMS WHERE FORM_ID = FORMID;
  
    UPDATE RFORMS SET FORM_LVL = (FLVL + 1) WHERE FORM_ID = FORMID;   
    SELECT FORM_LVL INTO FLVL FROM RFORMS WHERE FORM_ID = FORMID;

IF  FLVL > 3 THEN
    UPDATE RFORMS SET FORM_STATUS = 'Approved' WHERE FORM_ID = FORMID;
END IF;

COMMIT;
END;
/

UPDATE RFORMS SET FORM_LVL = 1 WHERE FORM_ID = 0;
commit;

-- PROCEDURE TO REJECT A REIMBURSEMENT
CREATE OR REPLACE PROCEDURE REJECTREIMBURSE(FORMID INT, DREASON VARCHAR2)
AS
BEGIN
    
    UPDATE RFORMS SET FORM_STATUS = ('Denied: ' || DREASON) WHERE FORM_ID = FORMID;
    
COMMIT;
END;
/

-- PROCEDURE TO INSERT A GRADE
CREATE OR REPLACE PROCEDURE INSERTGRADE(FORMID INT, FGRADE VARCHAR2)
AS
BEGIN
    
    UPDATE RFORMS SET EVENT_GRADE = FGRADE WHERE FORM_ID = FORMID;
    
COMMIT;
END;
/


