/*******************************************************************************
   Tuition Reimbursement Management System (TRMS) Database - Version 1.0
   Script: TRMS.sql
   Description: Creates the TRMS database.
   DB Server: Oracle
   Author: Anas Mohamad Daud
********************************************************************************/

/*******************************************************************************
   Drop database if it exists
********************************************************************************/

DROP USER TRMS CASCADE;

/*******************************************************************************
   Create Database
********************************************************************************/
CREATE USER amd
IDENTIFIED BY p4ssw0rd
DEFAULT TABLESPACE users
TEMPORARY TABLESPACE temp
QUOTA 10M ON users;

GRANT connect to amd;
GRANT resource to amd;
GRANT create session TO amd;
GRANT create table TO amd;
GRANT create view TO amd;

conn amd/p4ssw0rd

/*******************************************************************************
   Create Tables
********************************************************************************/

CREATE TABLE USERS(
USER_ID INTEGER PRIMARY KEY,
USER_NAME VARCHAR2(20),
USER_PASSWORD VARCHAR2(20),
FIRST_NAME VARCHAR2(20),
LAST_NAME VARCHAR2(20),
USER_POS VARCHAR2(20),
ACC_BALANCE DOUBLE PRECISION);

INSERT INTO USERS VALUES(1,'anasd','password','Anas','Daud','Employee',1000);
INSERT INTO USERS VALUES(2,'bgates','password','Bill','Gates','DS',1000);
INSERT INTO USERS VALUES(3,'testdh','password','Department','Head','DH',1000);
INSERT INTO USERS VALUES(4,'testbenco','password','Ben','Co','BC',1000);

CREATE TABLE FORMS(
FORM_ID INTEGER PRIMARY KEY,
FORM_USER_ID INTEGER,
FORM_EVENT_ID INTEGER,
SUBMISSION_DATE DATE,
EVENT_COST DOUBLE PRECISION,
FORM_STATUS VARCHAR(20),
EVENT_JUSTIFICATION VARCHAR(50)
);

INSERT INTO FORMS VALUES(1,1,5,DATE '2020-10-20',450,'pending','placeholder');
INSERT INTO FORMS VALUES(2,2,4,DATE '2020-07-14',200,'pending','placeholder');
INSERT INTO FORMS VALUES(3,3,3,DATE '2020-08-03',150,'pending','placeholder');
INSERT INTO FORMS VALUES(4,4,2,DATE '2020-06-28',300,'pending','placeholder');

CREATE TABLE EVENT(
EVENT_ID INTEGER PRIMARY KEY,
EVENT_TYPE INTEGER,
EVENT_DATE DATE,
EVENT_LOCATION VARCHAR2(50),
EVENT_DESC VARCHAR2(50),
EVENT_GFORMAT INTEGER,
EVENT_GRADE VARCHAR2(10)
);

CREATE TABLE EVENT_TYPE(
EVENT_TYPE_ID INTEGER PRIMARY KEY,
EVENT_TYPE_NAME VARCHAR2(60),
EVENT_TYPE_PERCENT NUMBER NOT NULL
);

-- HARD CODE VALUES FOR TABLE EVENT_TYPE
INSERT INTO EVENT_TYPE VALUES (1, 'university course', 80);
INSERT INTO EVENT_TYPE VALUES (2, 'seminar', 60);
INSERT INTO EVENT_TYPE VALUES (3, 'certification preparation class', 75);
INSERT INTO EVENT_TYPE VALUES (4, 'certification', 100);
INSERT INTO EVENT_TYPE VALUES (5, 'technical training', 90);
INSERT INTO EVENT_TYPE VALUES (6, 'other', 30);


CREATE TABLE GRADING_FORMAT(
GRADING_FORMAT_ID INTEGER PRIMARY KEY,
GRADING_FORMAT_NAME VARCHAR2(40),
GRADING_FORMAT_PASS_GRADE VARCHAR2(10)
);

-- HARD CODE VALUES FOR TABLE GRADING_FORMAT
INSERT INTO GRADING_FORMAT VALUES (1, 'Percentage (0-100)', '80');
INSERT INTO GRADING_FORMAT VALUES (2, 'Grade (A-F)', 'B');
INSERT INTO GRADING_FORMAT VALUES (3, 'Pass/Fail', 'PASS');
INSERT INTO GRADING_FORMAT VALUES (4, 'Other', 'Other');

/*******************************************************************************
   FOREIGN KEYS
********************************************************************************/
   
ALTER TABLE FORMS ADD CONSTRAINT FK_FORMS_USER
    FOREIGN KEY (FORM_USER_ID) REFERENCES
    USERS (USER_ID);
    
ALTER TABLE FORMS ADD CONSTRAINT FK_FORMS_EVENTS
    FOREIGN KEY (FORM_EVENT_ID) REFERENCES
    EVENTS (EVENT_ID);
    
ALTER TABLE EVENT ADD CONSTRAINT FK_EVENT_GRADING_FORMAT
    FOREIGN KEY (EVENT_GFORMAT) REFERENCES
    GRADING_FORMAT (GRADING_FORMAT_ID);

/*******************************************************************************
   CREATE SEQUENCES
********************************************************************************/

CREATE SEQUENCE FORMS_ID_SEQ; 
CREATE SEQUENCE EVENTS_ID_SEQ;

/*******************************************************************************
   Alter Tables
********************************************************************************/

ALTER TABLE CUSTOMERS
ADD CONSTRAINT UQ_USER_NAME
UNIQUE(USER_NAME);


/*******************************************************************************
   CREATE TRIGGERS
********************************************************************************/

CREATE OR REPLACE TRIGGER FORMS_INSERT
    BEFORE INSERT ON FORMS
    FOR EACH ROW
    BEGIN
        SELECT FORMS_ID_SEQ.NEXTVAL INTO :NEW.FORMS_ID FROM DUAL;
    END;
/

CREATE OR REPLACE TRIGGER EVENTS_INSERT
    BEFORE INSERT ON EVENTS
    FOR EACH ROW
    BEGIN
        SELECT EVENTS_ID_SEQ.NEXTVAL INTO :NEW.EVENTS_ID FROM DUAL;
    END;
/

/*******************************************************************************
   STORED PROCEDURES
********************************************************************************/

CREATE OR REPLACE PROCEDURE NEW_REIMBURSE
(USERID IN NUMBER,TFEES IN DOUBLE PRECISION,ETYPE IN INTEGER,EDATE IN DATE,EPLACE IN VARCHAR2,
EDESC IN VARCHAR2,GFORMAT IN INTEGER,EJUSTIFY IN VARCHAR2,MDAYS IN INTEGER,RPROJECT IN INTEGER)
AS
EID INTEGER;
BEGIN

INSERT INTO EVENT (EVENT_TYPE,EVENT_DATE,EVENT_LOCATION,EVENT_DESCRIPTION,EVENT_GRADING_FORMAT) 
VALUES (ETYPE,EDATE,EPLACE,EDESC,GFORMAT);

SELECT EVENT_ID_SEQ.CURRVAL INTO EID FROM DUAL;

INSERT INTO REIMBURSEMENT (REIMBURSEMENT_EMPLOYEE_ID,REIMBURSEMENT_COST,REIMBURSEMENT_STATUS,REIMBURSEMENT_EVENT,REIMBURSEMENT_DAYS_MISSED,REIMBURSEMENT_JUSTIFICATION) 
VALUES (EMPID,TFEES,'PENDING',EID,MDAYS,EJUSTIFY);

COMMIT;
END;
/

CREATE OR REPLACE PROCEDURE GET_USER
(UNAME IN VARCHAR2,UPASS IN VARCHAR2,U1 OUT SYS_REFCURSOR)
AS

BEGIN
OPEN U1 FOR
SELECT E.EMPLOYEE_ID,E.EMPLOYEE_FIRSTNAME,E.EMPLOYEE_LASTNAME,E.EMPLOYEE_EMAIL,ET.EMPLOYEE_TITLE_NAME,DE.DEPARTMENT_NAME FROM EMPLOYEE E
JOIN EMPLOYEE_TITLE ET
ON E.EMPLOYEE_TITLE = ET.EMPLOYEE_TITLE_ID
JOIN DEPARTMENT DE
ON E.EMPLOYEE_DEPARTMENT=DE.DEPARTMENT_ID
WHERE E.EMPLOYEE_USERNAME=UNAME AND E.EMPLOYEE_PASSWORD=UPASS;
END;
/

SELECT EMPLOYEE.EMPLOYEE_ID,EMPLOYEE.EMPLOYEE_FIRSTNAME,EMPLOYEE.EMPLOYEE_LASTNAME,EMPLOYEE.EMPLOYEE_EMAIL,EMPLOYEE.EMPLOYEE_USERNAME,EMPLOYEE.EMPLOYEE_PASSWORD,
EMPLOYEE_TITLE.EMPLOYEE_TITLE_NAME,DEPARTMENT.DEPARTMENT_NAME FROM EMPLOYEE 
JOIN EMPLOYEE_TITLE 
ON EMPLOYEE.EMPLOYEE_TITLE = EMPLOYEE_TITLE.EMPLOYEE_TITLE_ID
JOIN DEPARTMENT 
ON EMPLOYEE.EMPLOYEE_DEPARTMENT=DEPARTMENT.DEPARTMENT_ID;

execute get_user('VEEPATEL','Vee@1221');


SELECT EMPLOYEE_FIRSTNAME||' '||EMPLOYEE_LASTNAME AS EMPLOYEE_NAME,EMPLOYEE_EMAIL FROM EMPLOYEE;


SELECT EMPLOYEE.EMPLOYEE.FIRSTNAME,REIMBURSEMENT.REIMBURSEMENT_COST,
EVENT.EVENT_TYPE,EVENT.EVENT_DATE,EVENT.EVENT_LOCATION,EVENT.EVENT_DESCRIPTION,EVENT.EVENT_GRADE,
REIMBURSEMENT.REIMBURSEMENT_DAYS_MISSED,REIMBURSEMENT.REIMBURSEMENT_JUSTIFICATION,
REIMBURSEMENT.REIMBURSEMENT_STATUS,REIMBURSEMENT.REIMBURSEMENT_STATUS_BY FROM REIMBURSEMENT
JOIN EMPLOYEE
ON REIMBURSEMENT.REIMBURSEMENT_EMPLOYEE_ID=EMPLOYEE.EMPLOYEE_ID
JOIN EVENT
ON REIMBURSEMENT.REIMBURSEMENT_EVENT=EVENT.EVENT_ID;

SELECT EMPLOYEE.EMPLOYEE_ID,EMPLOYEE.EMPLOYEE_FIRSTNAME,EMPLOYEE.EMPLOYEE_LASTNAME,
EMPLOYEE_TITLE.EMPLOYEE_TITLE_NAME,DEPARTMENT.DEPARTMENT_NAME FROM EMPLOYEE 
JOIN EMPLOYEE_TITLE 
ON EMPLOYEE.EMPLOYEE_TITLE = EMPLOYEE_TITLE.EMPLOYEE_TITLE_ID
JOIN DEPARTMENT 
ON EMPLOYEE.EMPLOYEE_DEPARTMENT=DEPARTMENT.DEPARTMENT_ID
WHERE EMPLOYEE.EMPLOYEE_USERNAME=UNAME AND EMPLOYEE.EMPLOYEE_PASSWORD=UPASS;

